### Keys used by sio2:

# Title of the package is defined in `title` key.
title: Example task package
# Title can be different for different languages.
# They are defined in `title_<lang>` keys.
# <lang> is a language code (for example 'pl' or 'en').
# Available languages are defined in settings of `oioioi` instance.
title_pl: Przyk≈Çadowe zadanie

# Number of points for each group can be defined in `scores` key.
# If this key is not specified, then all groups have the same number of points.
# (if number of groups doesn't divide 100, then the last groups will have the remaining points).
# Group 0 always has zero points.
scores:
  1: 40
  2: 60

# Time limit for all tests is defined in `time_limit` key.
# More precise time limit for each group or test can be defined in `time_limits` key.
# The more precise time limit has higher priority (first group, then global time limit).
# Time limit is in milliseconds.
time_limit: 1000
time_limits:
  1: 2000

# Memory limit for all tests is defined in `memory_limit` key.
# More precise memory limits can be defined in `memory_limits` key.
# Same as with time limits, the more precise memory limit has higher priority.
# Memory limit is in kB
memory_limit: 262144
memory_limits:
  3: 131072

# Time and memory limits can be overriden for other languages in `override_limits` key.
# If this key is not specified, then all languages have the same limits.
override_limits:
  py:
    time_limit: 5000
    memory_limit: 524288

# Extra compilation arguments can be defined in `extra_compile_args` key.
# Each language can have different extra arguments.

# extra_compilation_args:
#   cpp: 'abclib.cpp'

# The arguments can also be in an array:

# extra_compilation_args:
#   cpp:
#     - 'abclib.cpp'
#     - 'abclib2.cpp'

# Additional files used in compilation can be defined in `extra_compilation_files` key.
# They are copied to the directory where the source code is compiled.
# All languages have the same additional files.

# extra_compilation_files: ['abclib.cpp', 'abclib.py']


### Keys used by sinol-make:

# This key represents the short name (consisting of 3 letters) of the task.
# The names of files in `prog/`, `doc/`, `in/` and `out/` directories have to start with this task id.
# This key is only used by `sinol-make`: running `sinol-make export` creates
# an archive with the proper name, which sio2 uses as the task id.
sinol_task_id: abc

# sinol-make can behave differently depending on the value of `sinol_contest_type` key.
# Mainly, it affects how points are calculated.
# If the key is not specified, then `default` is used.
# Possible values are:
# - `default` - Points for a test can only be 100 or 0 (unless checker assigns points).
#               Points for a group are calculated based of the lowest number of points for a test in this group.
#               If scores are not defined in `scores` key, then all groups have the same number of points,
#                summing up to 100.
# - `oi` - Points for a test are unchanged if the execution time is less or equal to the time limit.
#          Otherwise, number of points decreases linearly to one depending on the execution time.
#          Points for a group are calculated same as in `default` mode.
# - `icpc` - A test passes when the status is OK.
#            A group passes when all tests in this group pass.
#            A solution passes when all groups pass.
sinol_contest_type: oi

# You can specify which tests are static (handwritten). This allows sinol-make to differentiate between
# old and handwritten tests. If this key is not present old tests won't be removed.
# This key is optional and should be a list of tests.
sinol_static_tests: ["abc0.in", "abc0a.in"]

# sinol-make can check if the solutions run as expected when using `run` command.
# Key `sinol_expected_scores` defines expected scores for each solution on each tests.
# There should be no reason to change this key manually.
# It is automatically generated and managed by sinol-make.
sinol_expected_scores: {}
